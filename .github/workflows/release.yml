name: Release (Windows NSIS + Linux AppImage)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-linux-appimage:
    name: Build Linux AppImage
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Resolve release tag name
        id: meta
        shell: bash
        run: |
          PKG_VER=$(node -p "require('./package.json').version")
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            TAG_NAME="v${PKG_VER}"
          fi
          echo "Resolved tag: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Install system deps (AppImage helpers)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libarchive-tools rpm

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build renderer
        run: npm run build:renderer

      - name: Build AppImage
        run: npx electron-builder --linux AppImage

      - name: List dist contents
        run: |
          echo "==== dist ===="
          ls -lah dist || true
          echo "==== dist subfolders ===="
          find dist -maxdepth 2 -type f -printf '%p\n' || true

      - name: Find outputs
        id: find_linux
        shell: bash
        run: |
          echo "Dist folder contents:" && ls -lah dist || true
          APPIMAGE=$(ls -1 dist/**/*.AppImage dist/*.AppImage 2>/dev/null | head -n1 || true)
          if [ -z "$APPIMAGE" ]; then
            echo "No AppImage found in dist. Failing." >&2
            exit 1
          fi
          echo "appimage_path=$APPIMAGE" >> $GITHUB_OUTPUT
          if [ ! -f dist/latest-linux.yml ]; then
            echo "latest-linux.yml not found in dist. Failing." >&2
            exit 1
          fi
          echo "yml_path=dist/latest-linux.yml" >> $GITHUB_OUTPUT

      - name: Upload build folder as artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-${{ github.ref_name }}
          path: |
            dist/**
          if-no-files-found: error

      - name: Upload artifacts (actions/upload-release-asset)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.find_linux.outputs.appimage_path }}
            ${{ steps.find_linux.outputs.yml_path }}
          tag_name: ${{ steps.meta.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-nsis:
    name: Build Windows NSIS
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Resolve release tag name
        id: meta
        shell: bash
        run: |
          PKG_VER=$(node -p "require('./package.json').version")
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            TAG_NAME="v${PKG_VER}"
          fi
          echo "Resolved tag: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~\AppData\Roaming\npm-cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build renderer
        run: npm run build:renderer

      - name: Build NSIS installer
        run: npx electron-builder --win nsis

      - name: List dist contents
        shell: bash
        run: |
          echo "==== dist ===="
          ls -lah dist || true
          echo "==== dist subfolders ===="
          find dist -maxdepth 2 -type f -printf '%p\n' || true

      - name: Find outputs
        id: find_win
        shell: bash
        run: |
          echo "Dist folder contents:" && ls -lah dist || true
          EXE=$(ls -1 dist/*Setup*.exe dist/*.exe 2>/dev/null | head -n1 || true)
          if [ -z "$EXE" ]; then
            echo "No Windows installer exe found in dist. Failing." >&2
            exit 1
          fi
          echo "exe_path=$EXE" >> $GITHUB_OUTPUT
          if [ ! -f dist/latest.yml ]; then
            echo "latest.yml not found in dist. Failing." >&2
            exit 1
          fi
          echo "yml_path=dist/latest.yml" >> $GITHUB_OUTPUT

      - name: Upload build folder as artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: dist-windows-${{ github.ref_name }}
          path: |
            dist/**
          if-no-files-found: error

      - name: Upload artifacts (actions/upload-release-asset)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.find_win.outputs.exe_path }}
            ${{ steps.find_win.outputs.yml_path }}
          tag_name: ${{ steps.meta.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


